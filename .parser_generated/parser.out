Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANIMATE
    COLON
    CURSOR
    DIVIDE
    DO
    LBRACKET
    MINUS
    NOT
    OR
    PLUS
    RBRACKET
    TIMES
    WHILE

Grammar

Rule 0     S' -> programme
Rule 1     programme -> instruction
Rule 2     programme -> programme instruction
Rule 3     instruction -> dessin
Rule 4     instruction -> deplacement
Rule 5     instruction -> rotation
Rule 6     instruction -> couleur
Rule 7     instruction -> assignation
Rule 8     instruction -> conditionnelle
Rule 9     instruction -> boucle
Rule 10    instruction -> bloc
Rule 11    dessin -> DRAW forme LPAREN parametres RPAREN
Rule 12    forme -> LINE
Rule 13    forme -> CIRCLE
Rule 14    forme -> SQUARE
Rule 15    forme -> ARC
Rule 16    forme -> POINT
Rule 17    parametres -> parametres COMMA NUMBER
Rule 18    parametres -> NUMBER
Rule 19    deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN
Rule 20    rotation -> ROTATE LPAREN NUMBER RPAREN
Rule 21    couleur -> COLOR LPAREN STRING RPAREN
Rule 22    assignation -> VARIABLE IDENTIFIER EQUALS valeur
Rule 23    valeur -> NUMBER
Rule 24    valeur -> STRING
Rule 25    valeur -> BOOLEAN
Rule 26    valeur -> IDENTIFIER
Rule 27    bloc -> LBRACE programme RBRACE
Rule 28    conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc
Rule 29    conditionnelle -> IF LPAREN expression_logique RPAREN bloc
Rule 30    expression_logique -> valeur operateur_comparaison valeur
Rule 31    operateur_comparaison -> EQ
Rule 32    operateur_comparaison -> NEQ
Rule 33    operateur_comparaison -> LT
Rule 34    operateur_comparaison -> GT
Rule 35    operateur_comparaison -> LE
Rule 36    operateur_comparaison -> GE
Rule 37    boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc

Terminals, with rules where they appear

AND                  : 
ANIMATE              : 
ARC                  : 15
BOOLEAN              : 25
CIRCLE               : 13
COLON                : 
COLOR                : 21
COMMA                : 17 19
CURSOR               : 
DIVIDE               : 
DO                   : 
DRAW                 : 11
ELSE                 : 28
EQ                   : 31
EQUALS               : 22
FOR                  : 37
GE                   : 36
GT                   : 34
IDENTIFIER           : 22 26
IF                   : 28 29
LBRACE               : 27
LBRACKET             : 
LE                   : 35
LINE                 : 12
LPAREN               : 11 19 20 21 28 29 37
LT                   : 33
MINUS                : 
MOVE                 : 19
NEQ                  : 32
NOT                  : 
NUMBER               : 17 18 19 19 20 23
OR                   : 
PLUS                 : 
POINT                : 16
RBRACE               : 27
RBRACKET             : 
ROTATE               : 20
RPAREN               : 11 19 20 21 28 29 37
SEMICOLON            : 37 37
SQUARE               : 14
STRING               : 21 24
TIMES                : 
VARIABLE             : 22
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignation          : 7 37 37
bloc                 : 10 28 28 29 37
boucle               : 9
conditionnelle       : 8
couleur              : 6
deplacement          : 4
dessin               : 3
expression_logique   : 28 29 37
forme                : 11
instruction          : 1 2
operateur_comparaison : 30
parametres           : 11 17
programme            : 2 27 0
rotation             : 5
valeur               : 22 30 30

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . instruction
    (2) programme -> . programme instruction
    (3) instruction -> . dessin
    (4) instruction -> . deplacement
    (5) instruction -> . rotation
    (6) instruction -> . couleur
    (7) instruction -> . assignation
    (8) instruction -> . conditionnelle
    (9) instruction -> . boucle
    (10) instruction -> . bloc
    (11) dessin -> . DRAW forme LPAREN parametres RPAREN
    (19) deplacement -> . MOVE LPAREN NUMBER COMMA NUMBER RPAREN
    (20) rotation -> . ROTATE LPAREN NUMBER RPAREN
    (21) couleur -> . COLOR LPAREN STRING RPAREN
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur
    (28) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc
    (37) boucle -> . FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc
    (27) bloc -> . LBRACE programme RBRACE

    DRAW            shift and go to state 11
    MOVE            shift and go to state 12
    ROTATE          shift and go to state 13
    COLOR           shift and go to state 14
    VARIABLE        shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    LBRACE          shift and go to state 18

    programme                      shift and go to state 1
    instruction                    shift and go to state 2
    dessin                         shift and go to state 3
    deplacement                    shift and go to state 4
    rotation                       shift and go to state 5
    couleur                        shift and go to state 6
    assignation                    shift and go to state 7
    conditionnelle                 shift and go to state 8
    boucle                         shift and go to state 9
    bloc                           shift and go to state 10

state 1

    (0) S' -> programme .
    (2) programme -> programme . instruction
    (3) instruction -> . dessin
    (4) instruction -> . deplacement
    (5) instruction -> . rotation
    (6) instruction -> . couleur
    (7) instruction -> . assignation
    (8) instruction -> . conditionnelle
    (9) instruction -> . boucle
    (10) instruction -> . bloc
    (11) dessin -> . DRAW forme LPAREN parametres RPAREN
    (19) deplacement -> . MOVE LPAREN NUMBER COMMA NUMBER RPAREN
    (20) rotation -> . ROTATE LPAREN NUMBER RPAREN
    (21) couleur -> . COLOR LPAREN STRING RPAREN
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur
    (28) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc
    (37) boucle -> . FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc
    (27) bloc -> . LBRACE programme RBRACE

    DRAW            shift and go to state 11
    MOVE            shift and go to state 12
    ROTATE          shift and go to state 13
    COLOR           shift and go to state 14
    VARIABLE        shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    LBRACE          shift and go to state 18

    instruction                    shift and go to state 19
    dessin                         shift and go to state 3
    deplacement                    shift and go to state 4
    rotation                       shift and go to state 5
    couleur                        shift and go to state 6
    assignation                    shift and go to state 7
    conditionnelle                 shift and go to state 8
    boucle                         shift and go to state 9
    bloc                           shift and go to state 10

state 2

    (1) programme -> instruction .

    DRAW            reduce using rule 1 (programme -> instruction .)
    MOVE            reduce using rule 1 (programme -> instruction .)
    ROTATE          reduce using rule 1 (programme -> instruction .)
    COLOR           reduce using rule 1 (programme -> instruction .)
    VARIABLE        reduce using rule 1 (programme -> instruction .)
    IF              reduce using rule 1 (programme -> instruction .)
    FOR             reduce using rule 1 (programme -> instruction .)
    LBRACE          reduce using rule 1 (programme -> instruction .)
    $end            reduce using rule 1 (programme -> instruction .)
    RBRACE          reduce using rule 1 (programme -> instruction .)


state 3

    (3) instruction -> dessin .

    DRAW            reduce using rule 3 (instruction -> dessin .)
    MOVE            reduce using rule 3 (instruction -> dessin .)
    ROTATE          reduce using rule 3 (instruction -> dessin .)
    COLOR           reduce using rule 3 (instruction -> dessin .)
    VARIABLE        reduce using rule 3 (instruction -> dessin .)
    IF              reduce using rule 3 (instruction -> dessin .)
    FOR             reduce using rule 3 (instruction -> dessin .)
    LBRACE          reduce using rule 3 (instruction -> dessin .)
    $end            reduce using rule 3 (instruction -> dessin .)
    RBRACE          reduce using rule 3 (instruction -> dessin .)


state 4

    (4) instruction -> deplacement .

    DRAW            reduce using rule 4 (instruction -> deplacement .)
    MOVE            reduce using rule 4 (instruction -> deplacement .)
    ROTATE          reduce using rule 4 (instruction -> deplacement .)
    COLOR           reduce using rule 4 (instruction -> deplacement .)
    VARIABLE        reduce using rule 4 (instruction -> deplacement .)
    IF              reduce using rule 4 (instruction -> deplacement .)
    FOR             reduce using rule 4 (instruction -> deplacement .)
    LBRACE          reduce using rule 4 (instruction -> deplacement .)
    $end            reduce using rule 4 (instruction -> deplacement .)
    RBRACE          reduce using rule 4 (instruction -> deplacement .)


state 5

    (5) instruction -> rotation .

    DRAW            reduce using rule 5 (instruction -> rotation .)
    MOVE            reduce using rule 5 (instruction -> rotation .)
    ROTATE          reduce using rule 5 (instruction -> rotation .)
    COLOR           reduce using rule 5 (instruction -> rotation .)
    VARIABLE        reduce using rule 5 (instruction -> rotation .)
    IF              reduce using rule 5 (instruction -> rotation .)
    FOR             reduce using rule 5 (instruction -> rotation .)
    LBRACE          reduce using rule 5 (instruction -> rotation .)
    $end            reduce using rule 5 (instruction -> rotation .)
    RBRACE          reduce using rule 5 (instruction -> rotation .)


state 6

    (6) instruction -> couleur .

    DRAW            reduce using rule 6 (instruction -> couleur .)
    MOVE            reduce using rule 6 (instruction -> couleur .)
    ROTATE          reduce using rule 6 (instruction -> couleur .)
    COLOR           reduce using rule 6 (instruction -> couleur .)
    VARIABLE        reduce using rule 6 (instruction -> couleur .)
    IF              reduce using rule 6 (instruction -> couleur .)
    FOR             reduce using rule 6 (instruction -> couleur .)
    LBRACE          reduce using rule 6 (instruction -> couleur .)
    $end            reduce using rule 6 (instruction -> couleur .)
    RBRACE          reduce using rule 6 (instruction -> couleur .)


state 7

    (7) instruction -> assignation .

    DRAW            reduce using rule 7 (instruction -> assignation .)
    MOVE            reduce using rule 7 (instruction -> assignation .)
    ROTATE          reduce using rule 7 (instruction -> assignation .)
    COLOR           reduce using rule 7 (instruction -> assignation .)
    VARIABLE        reduce using rule 7 (instruction -> assignation .)
    IF              reduce using rule 7 (instruction -> assignation .)
    FOR             reduce using rule 7 (instruction -> assignation .)
    LBRACE          reduce using rule 7 (instruction -> assignation .)
    $end            reduce using rule 7 (instruction -> assignation .)
    RBRACE          reduce using rule 7 (instruction -> assignation .)


state 8

    (8) instruction -> conditionnelle .

    DRAW            reduce using rule 8 (instruction -> conditionnelle .)
    MOVE            reduce using rule 8 (instruction -> conditionnelle .)
    ROTATE          reduce using rule 8 (instruction -> conditionnelle .)
    COLOR           reduce using rule 8 (instruction -> conditionnelle .)
    VARIABLE        reduce using rule 8 (instruction -> conditionnelle .)
    IF              reduce using rule 8 (instruction -> conditionnelle .)
    FOR             reduce using rule 8 (instruction -> conditionnelle .)
    LBRACE          reduce using rule 8 (instruction -> conditionnelle .)
    $end            reduce using rule 8 (instruction -> conditionnelle .)
    RBRACE          reduce using rule 8 (instruction -> conditionnelle .)


state 9

    (9) instruction -> boucle .

    DRAW            reduce using rule 9 (instruction -> boucle .)
    MOVE            reduce using rule 9 (instruction -> boucle .)
    ROTATE          reduce using rule 9 (instruction -> boucle .)
    COLOR           reduce using rule 9 (instruction -> boucle .)
    VARIABLE        reduce using rule 9 (instruction -> boucle .)
    IF              reduce using rule 9 (instruction -> boucle .)
    FOR             reduce using rule 9 (instruction -> boucle .)
    LBRACE          reduce using rule 9 (instruction -> boucle .)
    $end            reduce using rule 9 (instruction -> boucle .)
    RBRACE          reduce using rule 9 (instruction -> boucle .)


state 10

    (10) instruction -> bloc .

    DRAW            reduce using rule 10 (instruction -> bloc .)
    MOVE            reduce using rule 10 (instruction -> bloc .)
    ROTATE          reduce using rule 10 (instruction -> bloc .)
    COLOR           reduce using rule 10 (instruction -> bloc .)
    VARIABLE        reduce using rule 10 (instruction -> bloc .)
    IF              reduce using rule 10 (instruction -> bloc .)
    FOR             reduce using rule 10 (instruction -> bloc .)
    LBRACE          reduce using rule 10 (instruction -> bloc .)
    $end            reduce using rule 10 (instruction -> bloc .)
    RBRACE          reduce using rule 10 (instruction -> bloc .)


state 11

    (11) dessin -> DRAW . forme LPAREN parametres RPAREN
    (12) forme -> . LINE
    (13) forme -> . CIRCLE
    (14) forme -> . SQUARE
    (15) forme -> . ARC
    (16) forme -> . POINT

    LINE            shift and go to state 21
    CIRCLE          shift and go to state 22
    SQUARE          shift and go to state 23
    ARC             shift and go to state 24
    POINT           shift and go to state 25

    forme                          shift and go to state 20

state 12

    (19) deplacement -> MOVE . LPAREN NUMBER COMMA NUMBER RPAREN

    LPAREN          shift and go to state 26


state 13

    (20) rotation -> ROTATE . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 27


state 14

    (21) couleur -> COLOR . LPAREN STRING RPAREN

    LPAREN          shift and go to state 28


state 15

    (22) assignation -> VARIABLE . IDENTIFIER EQUALS valeur

    IDENTIFIER      shift and go to state 29


state 16

    (28) conditionnelle -> IF . LPAREN expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> IF . LPAREN expression_logique RPAREN bloc

    LPAREN          shift and go to state 30


state 17

    (37) boucle -> FOR . LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc

    LPAREN          shift and go to state 31


state 18

    (27) bloc -> LBRACE . programme RBRACE
    (1) programme -> . instruction
    (2) programme -> . programme instruction
    (3) instruction -> . dessin
    (4) instruction -> . deplacement
    (5) instruction -> . rotation
    (6) instruction -> . couleur
    (7) instruction -> . assignation
    (8) instruction -> . conditionnelle
    (9) instruction -> . boucle
    (10) instruction -> . bloc
    (11) dessin -> . DRAW forme LPAREN parametres RPAREN
    (19) deplacement -> . MOVE LPAREN NUMBER COMMA NUMBER RPAREN
    (20) rotation -> . ROTATE LPAREN NUMBER RPAREN
    (21) couleur -> . COLOR LPAREN STRING RPAREN
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur
    (28) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc
    (37) boucle -> . FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc
    (27) bloc -> . LBRACE programme RBRACE

    DRAW            shift and go to state 11
    MOVE            shift and go to state 12
    ROTATE          shift and go to state 13
    COLOR           shift and go to state 14
    VARIABLE        shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    LBRACE          shift and go to state 18

    programme                      shift and go to state 32
    instruction                    shift and go to state 2
    dessin                         shift and go to state 3
    deplacement                    shift and go to state 4
    rotation                       shift and go to state 5
    couleur                        shift and go to state 6
    assignation                    shift and go to state 7
    conditionnelle                 shift and go to state 8
    boucle                         shift and go to state 9
    bloc                           shift and go to state 10

state 19

    (2) programme -> programme instruction .

    DRAW            reduce using rule 2 (programme -> programme instruction .)
    MOVE            reduce using rule 2 (programme -> programme instruction .)
    ROTATE          reduce using rule 2 (programme -> programme instruction .)
    COLOR           reduce using rule 2 (programme -> programme instruction .)
    VARIABLE        reduce using rule 2 (programme -> programme instruction .)
    IF              reduce using rule 2 (programme -> programme instruction .)
    FOR             reduce using rule 2 (programme -> programme instruction .)
    LBRACE          reduce using rule 2 (programme -> programme instruction .)
    $end            reduce using rule 2 (programme -> programme instruction .)
    RBRACE          reduce using rule 2 (programme -> programme instruction .)


state 20

    (11) dessin -> DRAW forme . LPAREN parametres RPAREN

    LPAREN          shift and go to state 33


state 21

    (12) forme -> LINE .

    LPAREN          reduce using rule 12 (forme -> LINE .)


state 22

    (13) forme -> CIRCLE .

    LPAREN          reduce using rule 13 (forme -> CIRCLE .)


state 23

    (14) forme -> SQUARE .

    LPAREN          reduce using rule 14 (forme -> SQUARE .)


state 24

    (15) forme -> ARC .

    LPAREN          reduce using rule 15 (forme -> ARC .)


state 25

    (16) forme -> POINT .

    LPAREN          reduce using rule 16 (forme -> POINT .)


state 26

    (19) deplacement -> MOVE LPAREN . NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 34


state 27

    (20) rotation -> ROTATE LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 35


state 28

    (21) couleur -> COLOR LPAREN . STRING RPAREN

    STRING          shift and go to state 36


state 29

    (22) assignation -> VARIABLE IDENTIFIER . EQUALS valeur

    EQUALS          shift and go to state 37


state 30

    (28) conditionnelle -> IF LPAREN . expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> IF LPAREN . expression_logique RPAREN bloc
    (30) expression_logique -> . valeur operateur_comparaison valeur
    (23) valeur -> . NUMBER
    (24) valeur -> . STRING
    (25) valeur -> . BOOLEAN
    (26) valeur -> . IDENTIFIER

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 42
    IDENTIFIER      shift and go to state 43

    expression_logique             shift and go to state 38
    valeur                         shift and go to state 39

state 31

    (37) boucle -> FOR LPAREN . assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur

    VARIABLE        shift and go to state 15

    assignation                    shift and go to state 44

state 32

    (27) bloc -> LBRACE programme . RBRACE
    (2) programme -> programme . instruction
    (3) instruction -> . dessin
    (4) instruction -> . deplacement
    (5) instruction -> . rotation
    (6) instruction -> . couleur
    (7) instruction -> . assignation
    (8) instruction -> . conditionnelle
    (9) instruction -> . boucle
    (10) instruction -> . bloc
    (11) dessin -> . DRAW forme LPAREN parametres RPAREN
    (19) deplacement -> . MOVE LPAREN NUMBER COMMA NUMBER RPAREN
    (20) rotation -> . ROTATE LPAREN NUMBER RPAREN
    (21) couleur -> . COLOR LPAREN STRING RPAREN
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur
    (28) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc ELSE bloc
    (29) conditionnelle -> . IF LPAREN expression_logique RPAREN bloc
    (37) boucle -> . FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc
    (27) bloc -> . LBRACE programme RBRACE

    RBRACE          shift and go to state 45
    DRAW            shift and go to state 11
    MOVE            shift and go to state 12
    ROTATE          shift and go to state 13
    COLOR           shift and go to state 14
    VARIABLE        shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    LBRACE          shift and go to state 18

    instruction                    shift and go to state 19
    dessin                         shift and go to state 3
    deplacement                    shift and go to state 4
    rotation                       shift and go to state 5
    couleur                        shift and go to state 6
    assignation                    shift and go to state 7
    conditionnelle                 shift and go to state 8
    boucle                         shift and go to state 9
    bloc                           shift and go to state 10

state 33

    (11) dessin -> DRAW forme LPAREN . parametres RPAREN
    (17) parametres -> . parametres COMMA NUMBER
    (18) parametres -> . NUMBER

    NUMBER          shift and go to state 47

    parametres                     shift and go to state 46

state 34

    (19) deplacement -> MOVE LPAREN NUMBER . COMMA NUMBER RPAREN

    COMMA           shift and go to state 48


state 35

    (20) rotation -> ROTATE LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 49


state 36

    (21) couleur -> COLOR LPAREN STRING . RPAREN

    RPAREN          shift and go to state 50


state 37

    (22) assignation -> VARIABLE IDENTIFIER EQUALS . valeur
    (23) valeur -> . NUMBER
    (24) valeur -> . STRING
    (25) valeur -> . BOOLEAN
    (26) valeur -> . IDENTIFIER

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 42
    IDENTIFIER      shift and go to state 43

    valeur                         shift and go to state 51

state 38

    (28) conditionnelle -> IF LPAREN expression_logique . RPAREN bloc ELSE bloc
    (29) conditionnelle -> IF LPAREN expression_logique . RPAREN bloc

    RPAREN          shift and go to state 52


state 39

    (30) expression_logique -> valeur . operateur_comparaison valeur
    (31) operateur_comparaison -> . EQ
    (32) operateur_comparaison -> . NEQ
    (33) operateur_comparaison -> . LT
    (34) operateur_comparaison -> . GT
    (35) operateur_comparaison -> . LE
    (36) operateur_comparaison -> . GE

    EQ              shift and go to state 54
    NEQ             shift and go to state 55
    LT              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    GE              shift and go to state 59

    operateur_comparaison          shift and go to state 53

state 40

    (23) valeur -> NUMBER .

    EQ              reduce using rule 23 (valeur -> NUMBER .)
    NEQ             reduce using rule 23 (valeur -> NUMBER .)
    LT              reduce using rule 23 (valeur -> NUMBER .)
    GT              reduce using rule 23 (valeur -> NUMBER .)
    LE              reduce using rule 23 (valeur -> NUMBER .)
    GE              reduce using rule 23 (valeur -> NUMBER .)
    DRAW            reduce using rule 23 (valeur -> NUMBER .)
    MOVE            reduce using rule 23 (valeur -> NUMBER .)
    ROTATE          reduce using rule 23 (valeur -> NUMBER .)
    COLOR           reduce using rule 23 (valeur -> NUMBER .)
    VARIABLE        reduce using rule 23 (valeur -> NUMBER .)
    IF              reduce using rule 23 (valeur -> NUMBER .)
    FOR             reduce using rule 23 (valeur -> NUMBER .)
    LBRACE          reduce using rule 23 (valeur -> NUMBER .)
    $end            reduce using rule 23 (valeur -> NUMBER .)
    RBRACE          reduce using rule 23 (valeur -> NUMBER .)
    SEMICOLON       reduce using rule 23 (valeur -> NUMBER .)
    RPAREN          reduce using rule 23 (valeur -> NUMBER .)


state 41

    (24) valeur -> STRING .

    EQ              reduce using rule 24 (valeur -> STRING .)
    NEQ             reduce using rule 24 (valeur -> STRING .)
    LT              reduce using rule 24 (valeur -> STRING .)
    GT              reduce using rule 24 (valeur -> STRING .)
    LE              reduce using rule 24 (valeur -> STRING .)
    GE              reduce using rule 24 (valeur -> STRING .)
    DRAW            reduce using rule 24 (valeur -> STRING .)
    MOVE            reduce using rule 24 (valeur -> STRING .)
    ROTATE          reduce using rule 24 (valeur -> STRING .)
    COLOR           reduce using rule 24 (valeur -> STRING .)
    VARIABLE        reduce using rule 24 (valeur -> STRING .)
    IF              reduce using rule 24 (valeur -> STRING .)
    FOR             reduce using rule 24 (valeur -> STRING .)
    LBRACE          reduce using rule 24 (valeur -> STRING .)
    $end            reduce using rule 24 (valeur -> STRING .)
    RBRACE          reduce using rule 24 (valeur -> STRING .)
    SEMICOLON       reduce using rule 24 (valeur -> STRING .)
    RPAREN          reduce using rule 24 (valeur -> STRING .)


state 42

    (25) valeur -> BOOLEAN .

    EQ              reduce using rule 25 (valeur -> BOOLEAN .)
    NEQ             reduce using rule 25 (valeur -> BOOLEAN .)
    LT              reduce using rule 25 (valeur -> BOOLEAN .)
    GT              reduce using rule 25 (valeur -> BOOLEAN .)
    LE              reduce using rule 25 (valeur -> BOOLEAN .)
    GE              reduce using rule 25 (valeur -> BOOLEAN .)
    DRAW            reduce using rule 25 (valeur -> BOOLEAN .)
    MOVE            reduce using rule 25 (valeur -> BOOLEAN .)
    ROTATE          reduce using rule 25 (valeur -> BOOLEAN .)
    COLOR           reduce using rule 25 (valeur -> BOOLEAN .)
    VARIABLE        reduce using rule 25 (valeur -> BOOLEAN .)
    IF              reduce using rule 25 (valeur -> BOOLEAN .)
    FOR             reduce using rule 25 (valeur -> BOOLEAN .)
    LBRACE          reduce using rule 25 (valeur -> BOOLEAN .)
    $end            reduce using rule 25 (valeur -> BOOLEAN .)
    RBRACE          reduce using rule 25 (valeur -> BOOLEAN .)
    SEMICOLON       reduce using rule 25 (valeur -> BOOLEAN .)
    RPAREN          reduce using rule 25 (valeur -> BOOLEAN .)


state 43

    (26) valeur -> IDENTIFIER .

    EQ              reduce using rule 26 (valeur -> IDENTIFIER .)
    NEQ             reduce using rule 26 (valeur -> IDENTIFIER .)
    LT              reduce using rule 26 (valeur -> IDENTIFIER .)
    GT              reduce using rule 26 (valeur -> IDENTIFIER .)
    LE              reduce using rule 26 (valeur -> IDENTIFIER .)
    GE              reduce using rule 26 (valeur -> IDENTIFIER .)
    DRAW            reduce using rule 26 (valeur -> IDENTIFIER .)
    MOVE            reduce using rule 26 (valeur -> IDENTIFIER .)
    ROTATE          reduce using rule 26 (valeur -> IDENTIFIER .)
    COLOR           reduce using rule 26 (valeur -> IDENTIFIER .)
    VARIABLE        reduce using rule 26 (valeur -> IDENTIFIER .)
    IF              reduce using rule 26 (valeur -> IDENTIFIER .)
    FOR             reduce using rule 26 (valeur -> IDENTIFIER .)
    LBRACE          reduce using rule 26 (valeur -> IDENTIFIER .)
    $end            reduce using rule 26 (valeur -> IDENTIFIER .)
    RBRACE          reduce using rule 26 (valeur -> IDENTIFIER .)
    SEMICOLON       reduce using rule 26 (valeur -> IDENTIFIER .)
    RPAREN          reduce using rule 26 (valeur -> IDENTIFIER .)


state 44

    (37) boucle -> FOR LPAREN assignation . SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc

    SEMICOLON       shift and go to state 60


state 45

    (27) bloc -> LBRACE programme RBRACE .

    DRAW            reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    MOVE            reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    ROTATE          reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    COLOR           reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    VARIABLE        reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    IF              reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    FOR             reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    LBRACE          reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    $end            reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    RBRACE          reduce using rule 27 (bloc -> LBRACE programme RBRACE .)
    ELSE            reduce using rule 27 (bloc -> LBRACE programme RBRACE .)


state 46

    (11) dessin -> DRAW forme LPAREN parametres . RPAREN
    (17) parametres -> parametres . COMMA NUMBER

    RPAREN          shift and go to state 61
    COMMA           shift and go to state 62


state 47

    (18) parametres -> NUMBER .

    RPAREN          reduce using rule 18 (parametres -> NUMBER .)
    COMMA           reduce using rule 18 (parametres -> NUMBER .)


state 48

    (19) deplacement -> MOVE LPAREN NUMBER COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 63


state 49

    (20) rotation -> ROTATE LPAREN NUMBER RPAREN .

    DRAW            reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    MOVE            reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    ROTATE          reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    COLOR           reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    VARIABLE        reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    IF              reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    FOR             reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    LBRACE          reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    $end            reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)
    RBRACE          reduce using rule 20 (rotation -> ROTATE LPAREN NUMBER RPAREN .)


state 50

    (21) couleur -> COLOR LPAREN STRING RPAREN .

    DRAW            reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    MOVE            reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    ROTATE          reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    COLOR           reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    VARIABLE        reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    IF              reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    FOR             reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    LBRACE          reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    $end            reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 21 (couleur -> COLOR LPAREN STRING RPAREN .)


state 51

    (22) assignation -> VARIABLE IDENTIFIER EQUALS valeur .

    DRAW            reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    MOVE            reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    ROTATE          reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    COLOR           reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    VARIABLE        reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    IF              reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    FOR             reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    LBRACE          reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    $end            reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    RBRACE          reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    SEMICOLON       reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)
    RPAREN          reduce using rule 22 (assignation -> VARIABLE IDENTIFIER EQUALS valeur .)


state 52

    (28) conditionnelle -> IF LPAREN expression_logique RPAREN . bloc ELSE bloc
    (29) conditionnelle -> IF LPAREN expression_logique RPAREN . bloc
    (27) bloc -> . LBRACE programme RBRACE

    LBRACE          shift and go to state 18

    bloc                           shift and go to state 64

state 53

    (30) expression_logique -> valeur operateur_comparaison . valeur
    (23) valeur -> . NUMBER
    (24) valeur -> . STRING
    (25) valeur -> . BOOLEAN
    (26) valeur -> . IDENTIFIER

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 42
    IDENTIFIER      shift and go to state 43

    valeur                         shift and go to state 65

state 54

    (31) operateur_comparaison -> EQ .

    NUMBER          reduce using rule 31 (operateur_comparaison -> EQ .)
    STRING          reduce using rule 31 (operateur_comparaison -> EQ .)
    BOOLEAN         reduce using rule 31 (operateur_comparaison -> EQ .)
    IDENTIFIER      reduce using rule 31 (operateur_comparaison -> EQ .)


state 55

    (32) operateur_comparaison -> NEQ .

    NUMBER          reduce using rule 32 (operateur_comparaison -> NEQ .)
    STRING          reduce using rule 32 (operateur_comparaison -> NEQ .)
    BOOLEAN         reduce using rule 32 (operateur_comparaison -> NEQ .)
    IDENTIFIER      reduce using rule 32 (operateur_comparaison -> NEQ .)


state 56

    (33) operateur_comparaison -> LT .

    NUMBER          reduce using rule 33 (operateur_comparaison -> LT .)
    STRING          reduce using rule 33 (operateur_comparaison -> LT .)
    BOOLEAN         reduce using rule 33 (operateur_comparaison -> LT .)
    IDENTIFIER      reduce using rule 33 (operateur_comparaison -> LT .)


state 57

    (34) operateur_comparaison -> GT .

    NUMBER          reduce using rule 34 (operateur_comparaison -> GT .)
    STRING          reduce using rule 34 (operateur_comparaison -> GT .)
    BOOLEAN         reduce using rule 34 (operateur_comparaison -> GT .)
    IDENTIFIER      reduce using rule 34 (operateur_comparaison -> GT .)


state 58

    (35) operateur_comparaison -> LE .

    NUMBER          reduce using rule 35 (operateur_comparaison -> LE .)
    STRING          reduce using rule 35 (operateur_comparaison -> LE .)
    BOOLEAN         reduce using rule 35 (operateur_comparaison -> LE .)
    IDENTIFIER      reduce using rule 35 (operateur_comparaison -> LE .)


state 59

    (36) operateur_comparaison -> GE .

    NUMBER          reduce using rule 36 (operateur_comparaison -> GE .)
    STRING          reduce using rule 36 (operateur_comparaison -> GE .)
    BOOLEAN         reduce using rule 36 (operateur_comparaison -> GE .)
    IDENTIFIER      reduce using rule 36 (operateur_comparaison -> GE .)


state 60

    (37) boucle -> FOR LPAREN assignation SEMICOLON . expression_logique SEMICOLON assignation RPAREN bloc
    (30) expression_logique -> . valeur operateur_comparaison valeur
    (23) valeur -> . NUMBER
    (24) valeur -> . STRING
    (25) valeur -> . BOOLEAN
    (26) valeur -> . IDENTIFIER

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 42
    IDENTIFIER      shift and go to state 43

    expression_logique             shift and go to state 66
    valeur                         shift and go to state 39

state 61

    (11) dessin -> DRAW forme LPAREN parametres RPAREN .

    DRAW            reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    MOVE            reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    ROTATE          reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    COLOR           reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    VARIABLE        reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    IF              reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    FOR             reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    LBRACE          reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    $end            reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)
    RBRACE          reduce using rule 11 (dessin -> DRAW forme LPAREN parametres RPAREN .)


state 62

    (17) parametres -> parametres COMMA . NUMBER

    NUMBER          shift and go to state 67


state 63

    (19) deplacement -> MOVE LPAREN NUMBER COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 68


state 64

    (28) conditionnelle -> IF LPAREN expression_logique RPAREN bloc . ELSE bloc
    (29) conditionnelle -> IF LPAREN expression_logique RPAREN bloc .

    ELSE            shift and go to state 69
    DRAW            reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    MOVE            reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    ROTATE          reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    COLOR           reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    VARIABLE        reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    IF              reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    FOR             reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    LBRACE          reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    $end            reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)
    RBRACE          reduce using rule 29 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc .)


state 65

    (30) expression_logique -> valeur operateur_comparaison valeur .

    RPAREN          reduce using rule 30 (expression_logique -> valeur operateur_comparaison valeur .)
    SEMICOLON       reduce using rule 30 (expression_logique -> valeur operateur_comparaison valeur .)


state 66

    (37) boucle -> FOR LPAREN assignation SEMICOLON expression_logique . SEMICOLON assignation RPAREN bloc

    SEMICOLON       shift and go to state 70


state 67

    (17) parametres -> parametres COMMA NUMBER .

    RPAREN          reduce using rule 17 (parametres -> parametres COMMA NUMBER .)
    COMMA           reduce using rule 17 (parametres -> parametres COMMA NUMBER .)


state 68

    (19) deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .

    DRAW            reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    MOVE            reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    ROTATE          reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    COLOR           reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    VARIABLE        reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    IF              reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    FOR             reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    LBRACE          reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    $end            reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)
    RBRACE          reduce using rule 19 (deplacement -> MOVE LPAREN NUMBER COMMA NUMBER RPAREN .)


state 69

    (28) conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE . bloc
    (27) bloc -> . LBRACE programme RBRACE

    LBRACE          shift and go to state 18

    bloc                           shift and go to state 71

state 70

    (37) boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON . assignation RPAREN bloc
    (22) assignation -> . VARIABLE IDENTIFIER EQUALS valeur

    VARIABLE        shift and go to state 15

    assignation                    shift and go to state 72

state 71

    (28) conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .

    DRAW            reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    MOVE            reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    ROTATE          reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    COLOR           reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    VARIABLE        reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    IF              reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    FOR             reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    LBRACE          reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    $end            reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)
    RBRACE          reduce using rule 28 (conditionnelle -> IF LPAREN expression_logique RPAREN bloc ELSE bloc .)


state 72

    (37) boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation . RPAREN bloc

    RPAREN          shift and go to state 73


state 73

    (37) boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN . bloc
    (27) bloc -> . LBRACE programme RBRACE

    LBRACE          shift and go to state 18

    bloc                           shift and go to state 74

state 74

    (37) boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .

    DRAW            reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    MOVE            reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    ROTATE          reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    COLOR           reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    VARIABLE        reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    IF              reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    FOR             reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    LBRACE          reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    $end            reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)
    RBRACE          reduce using rule 37 (boucle -> FOR LPAREN assignation SEMICOLON expression_logique SEMICOLON assignation RPAREN bloc .)

